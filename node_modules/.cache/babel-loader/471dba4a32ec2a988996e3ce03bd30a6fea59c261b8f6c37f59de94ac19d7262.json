{"ast":null,"code":"var _jsxFileName = \"C:\\\\whatsMenu\\\\todolist\\\\src\\\\components\\\\ToDo.jsx\";\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons';\n\n// Icones do CRUD\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToDo = _ref => {\n  let {\n    toDo,\n    markDone,\n    setUpdateData,\n    deleteTask\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: toDo && toDo.map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 25\n      }, this);\n    })\n\n    // .sort((a,b) => a.id > b.id ? 1:-1)\n    // .map( (task, index) => {\n    //     return(\n    //         <React.Fragment key={task.id}>\n    //             <div className=\"col taskBg\">\n\n    //                 <div className={task.status ? 'done' : ''}>\n    //                     <span className=\"taskNumber\">{index + 1}</span>\n    //                     <span className=\"taskText\">{index.title}</span>\n    //                 </div>\n\n    //                 <div className=\"iconsWrap\">\n\n    //                     <span title=\"Finalizado / Incompleto\"\n    //                         onClick={ (e) => markDone(task.id)}>\n    //                         <FontAwesomeIcon icon={faCircleCheck}/>\n    //                     </span>\n\n    //                     {task.status ? null : (\n    //                         <span title=\"Editar\"\n    //                         onClick={ ()=> setUpdateData({\n    //                         id: task.id,\n    //                         title: task.title,\n    //                         status: task.status ? true : false\n    //                         })}>\n    //                         <FontAwesomeIcon icon={faPen}/></span>\n    //                     )}\n\n    //                     <span title=\"Deletar\"\n    //                         onClick={()=> deleteTask(task.id)}>\n    //                         <FontAwesomeIcon icon={faTrashCan}/>\n    //                     </span>\n    //                 </div>\n    //             </div>\n    //         </React.Fragment>\n    //     )\n    // }\n    // )        \n  }, void 0, false);\n};\n_c = ToDo;\nexport default ToDo;\nvar _c;\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"names":["React","FontAwesomeIcon","faCircleCheck","faPen","faTrashCan","jsxDEV","_jsxDEV","Fragment","_Fragment","ToDo","_ref","toDo","markDone","setUpdateData","deleteTask","children","map","task","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/whatsMenu/todolist/src/components/ToDo.jsx"],"sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Icones do CRUD\r\nconst ToDo = ({ toDo, markDone, setUpdateData, deleteTask }) => {\r\n    return(\r\n        <>\r\n            {toDo && toDo\r\n\r\n                .map((task, index) => {\r\n                    return(\r\n                        <React.Fragment>\r\n                            <span>{}</span>\r\n                        </React.Fragment>\r\n                    )\r\n                })\r\n\r\n\r\n\r\n                // .sort((a,b) => a.id > b.id ? 1:-1)\r\n                // .map( (task, index) => {\r\n                //     return(\r\n                //         <React.Fragment key={task.id}>\r\n                //             <div className=\"col taskBg\">\r\n                                \r\n                //                 <div className={task.status ? 'done' : ''}>\r\n                //                     <span className=\"taskNumber\">{index + 1}</span>\r\n                //                     <span className=\"taskText\">{index.title}</span>\r\n                //                 </div>\r\n\r\n                //                 <div className=\"iconsWrap\">\r\n                                \r\n                //                     <span title=\"Finalizado / Incompleto\"\r\n                //                         onClick={ (e) => markDone(task.id)}>\r\n                //                         <FontAwesomeIcon icon={faCircleCheck}/>\r\n                //                     </span>\r\n\r\n                //                     {task.status ? null : (\r\n                //                         <span title=\"Editar\"\r\n                //                         onClick={ ()=> setUpdateData({\r\n                //                         id: task.id,\r\n                //                         title: task.title,\r\n                //                         status: task.status ? true : false\r\n                //                         })}>\r\n                //                         <FontAwesomeIcon icon={faPen}/></span>\r\n                //                     )}\r\n                                \r\n                //                     <span title=\"Deletar\"\r\n                //                         onClick={()=> deleteTask(task.id)}>\r\n                //                         <FontAwesomeIcon icon={faTrashCan}/>\r\n                //                     </span>\r\n                //                 </div>\r\n                //             </div>\r\n                //         </React.Fragment>\r\n                //     )\r\n                // }\r\n                // )        \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDo;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,EAAEC,KAAK,EAAEC,UAAU,QAAQ,mCAAmC;;AAEpF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,IAAI,GAAGC,IAAA,IAAmD;EAAA,IAAlD;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAW,CAAC,GAAAJ,IAAA;EACvD,oBACIJ,OAAA,CAAAE,SAAA;IAAAO,QAAA,EACKJ,IAAI,IAAIA,IAAI,CAERK,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAClB,oBACIZ,OAAA,CAACN,KAAK,CAACO,QAAQ;QAAAQ,QAAA,eACXT,OAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAEzB,CAAC;;IAID;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,gBAEN,CAAC;AAEX,CAAC;AAAAC,EAAA,GAxDKd,IAAI;AA0DV,eAAeA,IAAI;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}