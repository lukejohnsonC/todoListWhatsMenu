{"ast":null,"code":"var _jsxFileName = \"C:\\\\whatsMenu\\\\todolist\\\\src\\\\components\\\\toDo.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst toDo = _ref => {\n  let {} = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: ToDo && ToDo.sort((a, b) => a.id > b.id ? 1 : -1).map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col taskBg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: task.status ? 'done' : '',\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskNumber\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 15,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskText\",\n              children: index.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iconsWrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Finalizado / Incompleto\",\n              onClick: e => markDone(task.id),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCircleCheck\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 21\n            }, this), task.status ? null : /*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Editar\",\n              onClick: () => setUpdateData({\n                id: task.id,\n                title: task.title,\n                status: task.status ? true : false\n              }),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faPen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Deletar\",\n              onClick: () => deleteTask(task.id),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faTrashCan\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false);\n};\nexport default addTaskForm;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","toDo","_ref","children","ToDo","sort","a","b","id","map","task","index","className","status","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","e","markDone","FontAwesomeIcon","icon","faCircleCheck","setUpdateData","faPen","deleteTask","faTrashCan","addTaskForm"],"sources":["C:/whatsMenu/todolist/src/components/toDo.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst toDo = ({}) => {\r\n    return(\r\n        <>\r\n        {ToDo && ToDo\r\n            .sort((a,b) => a.id > b.id ? 1:-1)\r\n            .map( (task, index) => {\r\n            return(\r\n                <React.Fragment key={task.id}>\r\n\r\n                <div className=\"col taskBg\">\r\n                    \r\n                    <div className={task.status ? 'done' : ''}>\r\n                    <span className=\"taskNumber\">{index + 1}</span>\r\n                    <span className=\"taskText\">{index.title}</span>\r\n                    </div>\r\n\r\n                    <div className=\"iconsWrap\">\r\n                    \r\n                    <span title=\"Finalizado / Incompleto\"\r\n                        onClick={ (e) => markDone(task.id)}\r\n                    ><FontAwesomeIcon icon={faCircleCheck}/></span>\r\n\r\n                    {task.status ? null : (\r\n                        <span title=\"Editar\"\r\n                        onClick={ ()=> setUpdateData({\r\n                        id: task.id,\r\n                        title: task.title,\r\n                        status: task.status ? true : false\r\n                        })}\r\n                        ><FontAwesomeIcon icon={faPen}/></span>\r\n                    )}\r\n                    \r\n\r\n                    <span title=\"Deletar\"\r\n                    onClick={()=> deleteTask(task.id)}                  \r\n                    ><FontAwesomeIcon icon={faTrashCan}/></span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                </React.Fragment>\r\n                )\r\n            })        \r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default addTaskForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}